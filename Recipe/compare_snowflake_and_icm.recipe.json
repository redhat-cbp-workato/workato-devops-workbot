{
  "name": "Compare Snowflake and ICM",
  "description": "",
  "version": 81,
  "private": true,
  "concurrency": 1,
  "code": {
    "number": 0,
    "provider": "workato_recipe_function",
    "name": "execute",
    "as": "dc48a8a9",
    "keyword": "trigger",
    "input": {
    },
    "block": [
      {
        "number": 1,
        "provider": "workato_files",
        "name": "delete_file",
        "as": "4dfd0f4d",
        "keyword": "action",
        "dynamicPickListSelection": {
          "file_path": {
            "ids": [
              "/",
              "/CompareSnowflakeICM",
              "/CompareSnowflakeICM/Snowflake_ICM_Difference.csv"
            ],
            "titles": [
              "Root directory",
              "CompareSnowflakeICM",
              "Snowflake_ICM_Difference.csv"
            ]
          }
        },
        "toggleCfg": {
          "file_path": false
        },
        "input": {
          "file_path": "/CompareSnowflakeICM/Snowflake_ICM_Difference.csv"
        },
        "uuid": "834820af-04c0-42a6-bb38-7a4d65b432ad",
        "skip": false
      },
      {
        "number": 2,
        "provider": "workato_transformations",
        "name": "query_data",
        "as": "a881eaa0",
        "keyword": "action",
        "dynamicPickListSelection": {
          "sources.0.data_source_type": "FileStorage file",
          "sources.0.wf_file_path": {
            "ids": [
              "/",
              "/CompareSnowflakeICM",
              "/CompareSnowflakeICM/ICM_sandbox.csv"
            ],
            "titles": [
              "Root directory",
              "CompareSnowflakeICM",
              "ICM_sandbox.csv"
            ]
          },
          "sources.1.data_source_type": "FileStorage file",
          "sources.1.wf_file_path": {
            "ids": [
              "/",
              "/CompareSnowflakeICM",
              "/CompareSnowflakeICM/Snowflake_sandbox.csv"
            ],
            "titles": [
              "Root directory",
              "CompareSnowflakeICM",
              "Snowflake_sandbox.csv"
            ]
          }
        },
        "toggleCfg": {
          "output.csv_include_header": true,
          "sources.0.wf_file_path": false,
          "sources.0.allow_relaxed_schema": true,
          "sources.0.csv_ignore_header": true,
          "sources.1.wf_file_path": false,
          "sources.1.allow_relaxed_schema": true
        },
        "input": {
          "output": {
            "type": "content_stream",
            "file_format": "csv",
            "excel_include_header": "false",
            "excel_sheet_name": "Sheet 1",
            "excel_start_from": "A1",
            "csv_include_header": "true",
            "csv_delimiter": "comma",
            "csv_quote_style": "necessary",
            "csv_quote": "double"
          },
          "sources": [
            {
              "file_format": "csv",
              "schema_type": "defined",
              "dynamic_table_schema": "=",
              "excel_dynamic_table_schema": "=",
              "allow_relaxed_schema": "false",
              "csv_ignore_header": "true",
              "excel_ignore_header": "false",
              "matching_mode": "ordered",
              "csv_delimiter": "comma",
              "table_name": "ICM",
              "data_source_type": "wf_file",
              "wf_file_path": "/CompareSnowflakeICM/ICM_sandbox.csv",
              "table_schema": "[{\"control_type\":\"text\",\"label\":\"Opportunity ID\",\"optional\":true,\"type\":\"string\",\"name\":\"OpportunityID\"},{\"control_type\":\"text\",\"label\":\"Corp currency code\",\"optional\":true,\"type\":\"string\",\"name\":\"CorpCurrencyCode\"},{\"control_type\":\"text\",\"label\":\"Original close date\",\"render_input\":\"date_time_conversion\",\"parse_output\":\"date_time_conversion\",\"optional\":true,\"type\":\"date_time\",\"name\":\"Original_Close_Date\"},{\"control_type\":\"text\",\"label\":\"Total ACV\",\"optional\":true,\"type\":\"string\",\"name\":\"TotalACV\"},{\"control_type\":\"text\",\"label\":\"Total ARR\",\"optional\":true,\"type\":\"string\",\"name\":\"TotalARR\"},{\"control_type\":\"text\",\"label\":\"Total TCV\",\"optional\":true,\"type\":\"string\",\"name\":\"TotalTCV\"},{\"control_type\":\"text\",\"label\":\"Total TCV SEAP\",\"optional\":true,\"type\":\"string\",\"name\":\"TotalTCV_SEAP\"},{\"control_type\":\"text\",\"label\":\"Number of opps\",\"optional\":true,\"type\":\"string\",\"name\":\"numberOfOpps\"}]"
            },
            {
              "file_format": "csv",
              "schema_type": "defined",
              "dynamic_table_schema": "=",
              "excel_dynamic_table_schema": "=",
              "allow_relaxed_schema": "false",
              "csv_ignore_header": true,
              "excel_ignore_header": "false",
              "matching_mode": "ordered",
              "csv_delimiter": "comma",
              "table_name": "SNOWFLAKE",
              "data_source_type": "wf_file",
              "wf_file_path": "/CompareSnowflakeICM/Snowflake_sandbox.csv",
              "table_schema": "[{\"control_type\":\"text\",\"label\":\"OPPORTUNITYID\",\"optional\":true,\"type\":\"string\",\"name\":\"OPPORTUNITYID\"},{\"control_type\":\"text\",\"label\":\"CORPCURRENCYCODE\",\"optional\":true,\"type\":\"string\",\"name\":\"CORPCURRENCYCODE\"},{\"control_type\":\"text\",\"label\":\"ORIGINAL CLOSE DATE\",\"optional\":true,\"type\":\"string\",\"name\":\"ORIGINAL_CLOSE_DATE\"},{\"control_type\":\"text\",\"label\":\"TOTALACV\",\"optional\":true,\"type\":\"string\",\"name\":\"TOTALACV\"},{\"control_type\":\"text\",\"label\":\"TOTALARR\",\"optional\":true,\"type\":\"string\",\"name\":\"TOTALARR\"},{\"control_type\":\"text\",\"label\":\"TOTALTCV\",\"optional\":true,\"type\":\"string\",\"name\":\"TOTALTCV\"},{\"control_type\":\"text\",\"label\":\"TOTALTCV SEAP\",\"optional\":true,\"type\":\"string\",\"name\":\"TOTALTCV_SEAP\"},{\"control_type\":\"text\",\"label\":\"NUMBEROFOPPS\",\"optional\":true,\"type\":\"string\",\"name\":\"NUMBEROFOPPS\"}]"
            }
          ],
          "query": {
            "sql_select_query": "SELECT\n     ICM.OpportunityID AS ICM_OpportunityID, SNOWFLAKE.OPPORTUNITYID AS SNOWFLAKE_OPPORTUNITYID,\n     \n     ICM.CorpCurrencyCode AS ICM_CorpCurrencyCode, SNOWFLAKE.CORPCURRENCYCODE AS SNOWFLAKE_CORPCURRENCYCODE,\n     \n     CASE \n  WHEN ICM.CorpCurrencyCode IS NOT NULL \n       AND SNOWFLAKE.CORPCURRENCYCODE IS NOT NULL \n       AND ICM.CorpCurrencyCode <> SNOWFLAKE.CORPCURRENCYCODE \n  THEN 'yes' \n  ELSE '' \nEND AS diff_CorpCurrencyCode,\n     \n     ICM.Original_Close_Date AS ICM_Original_Close_Date, SNOWFLAKE.ORIGINAL_CLOSE_DATE AS SNOWFLAKE_ORIGINAL_CLOSE_DATE,\n     \n     CASE \n  WHEN ICM.Original_Close_Date IS NOT NULL \n       AND SNOWFLAKE.ORIGINAL_CLOSE_DATE IS NOT NULL \n       AND ICM.Original_Close_Date <> SNOWFLAKE.ORIGINAL_CLOSE_DATE \n  THEN 'yes' \n  ELSE '' \nEND AS diff_Original_Close_Date,\n\n     ICM.TotalACV AS icm_TotalACV,\n     SNOWFLAKE.TOTALACV AS snowflake_TotalACV,\n     CASE WHEN ABS(ROUND(CAST(ROUND(CAST(ICM.TotalACV AS DOUBLE), 15) AS DOUBLE) - CAST(ROUND(CAST(SNOWFLAKE.TOTALACV AS DOUBLE), 15) AS DOUBLE) ,2)) > 0.00 THEN ABS(ROUND(CAST(ROUND(CAST(ICM.TotalACV AS DOUBLE), 15) AS DOUBLE) - CAST(ROUND(CAST(SNOWFLAKE.TOTALACV AS DOUBLE), 15) AS DOUBLE) ,2)) ELSE '' END AS diff_TotalACV,\n\n     ICM.TotalARR AS icm_TotalARR,\n     SNOWFLAKE.TOTALARR AS snowflake_TotalARR,\n     CASE WHEN ABS(ROUND(CAST(ROUND(CAST(ICM.TotalARR AS DOUBLE), 15) AS DOUBLE) - CAST(ROUND(CAST(SNOWFLAKE.TOTALARR AS DOUBLE), 15) AS DOUBLE) ,2)) > 0.00 THEN ABS(ROUND(CAST(ROUND(CAST(ICM.TotalARR AS DOUBLE), 15) AS DOUBLE) - CAST(ROUND(CAST(SNOWFLAKE.TOTALARR AS DOUBLE), 15) AS DOUBLE) ,2)) ELSE '' END AS diff_TotalARR,\n\n     ICM.TotalTCV AS icm_TotalTCV,\n     SNOWFLAKE.TOTALTCV AS snowflake_TotalTCV,\n     CASE WHEN ABS(ROUND(CAST(ROUND(CAST(ICM.TotalTCV AS DOUBLE), 15) AS DOUBLE) - CAST(ROUND(CAST(SNOWFLAKE.TOTALTCV AS DOUBLE), 15) AS DOUBLE) ,2)) > 0.00 THEN ABS(ROUND(CAST(ROUND(CAST(ICM.TotalTCV AS DOUBLE), 15) AS DOUBLE) - CAST(ROUND(CAST(SNOWFLAKE.TOTALTCV AS DOUBLE), 15) AS DOUBLE) ,2)) ELSE '' END AS diff_TotalTCV,\n\n     ICM.TotalTCV_SEAP AS icm_TotalTCV_SEAP,\n     SNOWFLAKE.TOTALTCV_SEAP AS snowflake_TotalTCV_SEAP,\n     CASE WHEN ABS(ROUND(CAST(ROUND(CAST(ICM.TotalTCV_SEAP AS DOUBLE), 15) AS DOUBLE) - CAST(ROUND(CAST(SNOWFLAKE.TOTALTCV_SEAP AS DOUBLE), 15) AS DOUBLE) ,2)) > 0.00 THEN ABS(ROUND(CAST(ROUND(CAST(ICM.TotalTCV_SEAP AS DOUBLE), 15) AS DOUBLE) - CAST(ROUND(CAST(SNOWFLAKE.TOTALTCV_SEAP AS DOUBLE), 15) AS DOUBLE) ,2)) ELSE '' END AS diff_TotalTCV_SEAP,\n\n     ICM.numberOfOpps AS icm_numberOfOpps,\n     SNOWFLAKE.NUMBEROFOPPS AS snowflake_numberOfOpps,\n     CASE WHEN ABS(ROUND(CAST(ROUND(CAST(ICM.numberOfOpps AS DOUBLE), 15) AS DOUBLE) - CAST(ROUND(CAST(SNOWFLAKE.NUMBEROFOPPS AS DOUBLE), 15) AS DOUBLE) ,2)) > 0.00 THEN ABS(ROUND(CAST(ROUND(CAST(ICM.numberOfOpps AS DOUBLE), 15) AS DOUBLE) - CAST(ROUND(CAST(SNOWFLAKE.NUMBEROFOPPS AS DOUBLE), 15) AS DOUBLE) ,2)) ELSE '' END AS diff_numberOfOpps,\n\n     CASE\n        WHEN ICM.OpportunityID IS NULL THEN\n            CONCAT('OpportunityID missing in ICM for Snowflake ID ', SNOWFLAKE.OPPORTUNITYID)\n        WHEN SNOWFLAKE.OPPORTUNITYID IS NULL THEN\n            CONCAT('OpportunityID missing in Snowflake for ICM ID ', ICM.OpportunityID)\n        ELSE\n            TRIM(BOTH ', ' FROM\n                CONCAT_WS(', ',\n                    CASE WHEN ABS(ROUND(CAST(ROUND(CAST(ICM.TotalACV AS DOUBLE), 15) AS DOUBLE) - CAST(ROUND(CAST(SNOWFLAKE.TOTALACV AS DOUBLE), 15) AS DOUBLE) ,2)) > 0.00 THEN\n                        CONCAT('TotalACV mismatch (ICM: ', ICM.TotalACV, ', Snowflake: ', SNOWFLAKE.TOTALACV, ', DIFF:', TRY_CAST(ROUND(CAST(ROUND(CAST(ICM.TotalACV AS DOUBLE), 15) AS DOUBLE) - CAST(ROUND(CAST(SNOWFLAKE.TOTALACV AS DOUBLE), 15) AS DOUBLE) ,2) AS STRING), ')') ELSE NULL END,\n                    CASE WHEN ABS(ROUND(CAST(ROUND(CAST(ICM.TotalARR AS DOUBLE), 15) AS DOUBLE) - CAST(ROUND(CAST(SNOWFLAKE.TOTALARR AS DOUBLE), 15) AS DOUBLE) ,2)) > 0.00 THEN\n                        CONCAT('TotalARR mismatch (ICM: ', ICM.TotalARR, ', Snowflake: ', SNOWFLAKE.TOTALARR, ', DIFF:', TRY_CAST(ROUND(CAST(ROUND(CAST(ICM.TotalARR AS DOUBLE), 15) AS DOUBLE) - CAST(ROUND(CAST(SNOWFLAKE.TOTALARR AS DOUBLE), 15) AS DOUBLE) ,2) AS STRING), ')') ELSE NULL END,\n                    CASE WHEN ABS(ROUND(CAST(ROUND(CAST(ICM.TotalTCV AS DOUBLE), 15) AS DOUBLE) - CAST(ROUND(CAST(SNOWFLAKE.TOTALTCV AS DOUBLE), 15) AS DOUBLE) ,2)) > 0.00 THEN\n                        CONCAT('TotalTCV mismatch (ICM: ', ICM.TotalTCV, ', Snowflake: ', SNOWFLAKE.TOTALTCV, ', DIFF:', TRY_CAST(ROUND(CAST(ROUND(CAST(ICM.TotalTCV AS DOUBLE), 15) AS DOUBLE) - CAST(ROUND(CAST(SNOWFLAKE.TOTALTCV AS DOUBLE), 15) AS DOUBLE) ,2) AS STRING), ')') ELSE NULL END,\n                    CASE WHEN ABS(ROUND(CAST(ROUND(CAST(ICM.TotalTCV_SEAP AS DOUBLE), 15) AS DOUBLE) - CAST(ROUND(CAST(SNOWFLAKE.TOTALTCV_SEAP AS DOUBLE), 15) AS DOUBLE) ,2)) > 0.00 THEN\n                        CONCAT('TotalTCV_SEAP mismatch (ICM: ', ICM.TotalTCV_SEAP, ', Snowflake: ', SNOWFLAKE.TOTALTCV_SEAP, ', DIFF:', TRY_CAST(ROUND(CAST(ROUND(CAST(ICM.TotalTCV_SEAP AS DOUBLE), 15) AS DOUBLE) - CAST(ROUND(CAST(SNOWFLAKE.TOTALTCV_SEAP AS DOUBLE), 15) AS DOUBLE) ,2) AS STRING), ')') ELSE NULL END,\n                    CASE WHEN ABS(ROUND(CAST(ROUND(CAST(ICM.numberOfOpps AS DOUBLE), 15) AS DOUBLE) - CAST(ROUND(CAST(SNOWFLAKE.NUMBEROFOPPS AS DOUBLE), 15) AS DOUBLE) ,2)) > 0.00 THEN\n                        CONCAT('numberOfOpps mismatch (ICM: ', ICM.numberOfOpps, ', Snowflake: ', SNOWFLAKE.NUMBEROFOPPS, ', DIFF:', TRY_CAST(ROUND(CAST(ROUND(CAST(ICM.numberOfOpps AS DOUBLE), 15) AS DOUBLE) - CAST(ROUND(CAST(SNOWFLAKE.NUMBEROFOPPS AS DOUBLE), 15) AS DOUBLE) ,2) AS STRING), ')') ELSE NULL END\n                )\n            )\n    END AS result_message\n\n FROM ICM\n FULL OUTER JOIN SNOWFLAKE\n     ON ICM.OpportunityID = SNOWFLAKE.OPPORTUNITYID\n\n WHERE\n     (ICM.OpportunityID IS DISTINCT FROM SNOWFLAKE.OPPORTUNITYID) OR\n     (ICM.TotalACV IS DISTINCT FROM SNOWFLAKE.TOTALACV) OR\n     (ICM.TotalARR IS DISTINCT FROM SNOWFLAKE.TOTALARR) OR\n     (ICM.TotalTCV IS DISTINCT FROM SNOWFLAKE.TOTALTCV) OR\n     (ICM.TotalTCV_SEAP IS DISTINCT FROM SNOWFLAKE.TOTALTCV_SEAP) OR\n     (ICM.numberOfOpps IS DISTINCT FROM SNOWFLAKE.NUMBEROFOPPS);\n"
          }
        },
        "extended_output_schema": [
          {
            "control_type": "integer",
            "hint": "Number of lines in the resulting CSV",
            "label": "Number of rows",
            "name": "result_lines",
            "parse_output": "integer_conversion",
            "type": "integer"
          },
          {
            "control_type": "number",
            "hint": "Content size in bytes",
            "label": "Content size (bytes)",
            "name": "size",
            "parse_output": "integer_conversion",
            "type": "integer"
          },
          {
            "control_type": "text",
            "hint": "Contents (conditional, based on output type selected)",
            "label": "Contents",
            "name": "content",
            "type": "string"
          },
          {
            "control_type": "string",
            "label": "Query execution time",
            "name": "query_execution_time",
            "type": "string"
          },
          {
            "control_type": "string",
            "label": "Total processing time",
            "name": "total_processing_time",
            "type": "string"
          },
          {
            "label": "Source schemas",
            "name": "source_schemas",
            "of": "object",
            "properties": [
              {
                "control_type": "text",
                "label": "Table name",
                "type": "string",
                "name": "source"
              },
              {
                "name": "schema",
                "type": "array",
                "of": "object",
                "label": "Schema",
                "properties": [
                  {
                    "control_type": "text",
                    "label": "Field name",
                    "type": "string",
                    "name": "name"
                  },
                  {
                    "control_type": "text",
                    "label": "Field type",
                    "type": "string",
                    "name": "type"
                  },
                  {
                    "control_type": "checkbox",
                    "label": "Is field optional",
                    "toggle_hint": "Select from option list",
                    "toggle_field": {
                      "label": "Is field optional",
                      "control_type": "text",
                      "toggle_hint": "Use custom value",
                      "render_input": null,
                      "parse_output": null,
                      "type": "boolean",
                      "name": "optional"
                    },
                    "type": "boolean",
                    "name": "optional"
                  }
                ]
              }
            ],
            "type": "array"
          },
          {
            "label": "Output schema",
            "name": "output_schema",
            "of": "object",
            "properties": [
              {
                "control_type": "text",
                "label": "Field name",
                "type": "string",
                "name": "name"
              },
              {
                "control_type": "text",
                "label": "Field type",
                "type": "string",
                "name": "type"
              },
              {
                "control_type": "checkbox",
                "label": "Is field optional",
                "toggle_hint": "Select from option list",
                "toggle_field": {
                  "label": "Is field optional",
                  "control_type": "text",
                  "toggle_hint": "Use custom value",
                  "render_input": null,
                  "parse_output": null,
                  "type": "boolean",
                  "name": "optional"
                },
                "type": "boolean",
                "name": "optional"
              }
            ],
            "type": "array"
          }
        ],
        "extended_input_schema": [
          {
            "add_item_label": "Add data source",
            "empty_list_text": "At least one data-source must be provided.",
            "empty_list_title": "Multiple data-sources can be added to perform `join` operations.",
            "enforce_template_mode": true,
            "hint": "Specify data-sources to perform SQL over them",
            "initially_expanded": true,
            "item_label": "Source",
            "label": "Data Sources",
            "list_mode": "static",
            "name": "sources",
            "of": "object",
            "overridden_value": [
              {
                "file_format": "csv",
                "schema_type": "defined",
                "dynamic_table_schema": "=",
                "excel_dynamic_table_schema": "=",
                "allow_relaxed_schema": "false",
                "csv_ignore_header": "true",
                "excel_ignore_header": "false",
                "matching_mode": "ordered",
                "csv_delimiter": "comma",
                "table_name": "ICM",
                "data_source_type": "wf_file",
                "wf_file_path": "/CompareSnowflakeICM/ICM_sandbox.csv",
                "table_schema": "[{\"control_type\":\"text\",\"label\":\"Opportunity ID\",\"optional\":true,\"type\":\"string\",\"name\":\"OpportunityID\"},{\"control_type\":\"text\",\"label\":\"Total ACV\",\"optional\":true,\"type\":\"string\",\"name\":\"TotalACV\"},{\"control_type\":\"text\",\"label\":\"Total ARR\",\"optional\":true,\"type\":\"string\",\"name\":\"TotalARR\"},{\"control_type\":\"text\",\"label\":\"Total TCV\",\"optional\":true,\"type\":\"string\",\"name\":\"TotalTCV\"},{\"control_type\":\"text\",\"label\":\"Total TCV SEAP\",\"optional\":true,\"type\":\"string\",\"name\":\"TotalTCV_SEAP\"},{\"control_type\":\"text\",\"label\":\"Number of opps\",\"optional\":true,\"type\":\"string\",\"name\":\"numberOfOpps\"}]",
                "prev_file_path": "/CompareSnowflakeICM/ICM_sandbox.csv"
              },
              {
                "file_format": "csv",
                "schema_type": "defined",
                "dynamic_table_schema": "=",
                "excel_dynamic_table_schema": "=",
                "allow_relaxed_schema": "false",
                "csv_ignore_header": true,
                "excel_ignore_header": "false",
                "matching_mode": "ordered",
                "csv_delimiter": "comma",
                "table_name": "SNOWFLAKE",
                "data_source_type": "wf_file",
                "wf_file_path": "/CompareSnowflakeICM/Snowflake_sandbox.csv",
                "table_schema": "[{\"control_type\":\"text\",\"label\":\"OPPORTUNITYID\",\"name\":\"OPPORTUNITYID\",\"optional\":false,\"type\":\"string\",\"valid_types\":[\"string\"]},{\"control_type\":\"text\",\"label\":\"TOTALACV\",\"name\":\"TOTALACV\",\"optional\":false,\"type\":\"string\",\"valid_types\":[\"string\"]},{\"control_type\":\"text\",\"label\":\"TOTALARR\",\"parse_output\":\"float_conversion\",\"name\":\"TOTALARR\",\"optional\":false,\"type\":\"number\",\"valid_types\":[\"string\",\"number\"]},{\"control_type\":\"text\",\"label\":\"TOTALTCV\",\"parse_output\":\"float_conversion\",\"name\":\"TOTALTCV\",\"optional\":false,\"type\":\"number\",\"valid_types\":[\"string\",\"number\"]},{\"control_type\":\"text\",\"label\":\"TOTALTCV_SEAP\",\"parse_output\":\"float_conversion\",\"name\":\"TOTALTCV_SEAP\",\"optional\":false,\"type\":\"number\",\"valid_types\":[\"string\",\"number\"]},{\"control_type\":\"text\",\"label\":\"NUMBEROFOPPS\",\"parse_output\":\"integer_conversion\",\"name\":\"NUMBEROFOPPS\",\"optional\":false,\"type\":\"integer\",\"valid_types\":[\"string\",\"integer\",\"number\"]}]",
                "prev_file_path": "/CompareSnowflakeICM/Snowflake_sandbox.csv"
              }
            ],
            "override": true,
            "properties": [
              {
                "control_type": "text",
                "label": "Data source name",
                "sticky": true,
                "support_pills": false,
                "extends_schema": false,
                "optional": false,
                "hint": "Provide an alias name for the data source. E.g: contacts, orders. This name is to be used in the query.",
                "type": "string",
                "name": "table_name"
              },
              {
                "control_type": "select",
                "label": "Data source type",
                "extends_schema": true,
                "change_on_blur": true,
                "pick_list": "data_sources_list",
                "hint": "                   Provide the data source type. To pass file content directly from upstream action/trigger chooser Content Stream.\n                   You can also refer to a file in Workato FileStorage or a table from Data tables.\n",
                "type": "string",
                "name": "data_source_type"
              },
              {
                "control_type": "text-area",
                "label": "Content input stream",
                "sticky": true,
                "strip_interpolation": true,
                "change_on_blur": true,
                "ngIf": "parentInput.data_source_type && parentInput.data_source_type === 'content_stream'",
                "optionalExpression": "parentInput.data_source_type && parentInput.data_source_type !== 'content_stream'",
                "optional": true,
                "hint": "Pass the contents or file contents reference pill here from an upstream action or trigger.",
                "type": "string",
                "name": "source_stream"
              },
              {
                "control_type": "text",
                "label": "FileStorage file",
                "sticky": true,
                "change_on_blur": true,
                "ngIf": "parentInput.data_source_type && parentInput.data_source_type === 'wf_file'",
                "optionalExpression": "parentInput.data_source_type && parentInput.data_source_type !== 'wf_file'",
                "extends_schema": true,
                "optional": true,
                "mark_as_required": true,
                "toggle_hint": "Enter file path",
                "toggle_field": {
                  "control_type": "tree",
                  "label": "FileStorage file",
                  "toggle_hint": "Choose a file",
                  "tree_options": {
                    "selectable_folder": false
                  },
                  "pick_list": "wf_files_list",
                  "extends_schema": true,
                  "toggle_to_primary_hint": "Enter file path",
                  "toggle_to_secondary_hint": "Choose a file",
                  "hint": "Choose the file to fetch the data",
                  "type": "string",
                  "name": "wf_file_path"
                },
                "hint": "                   Provide the FileStorage file full path here to fetch the data. For example, “samplepath/filename.csv”.\n",
                "type": "string",
                "name": "wf_file_path"
              },
              {
                "control_type": "select",
                "label": "Data table",
                "pick_list": "current_user_table_list",
                "extends_schema": true,
                "ngIf": "parentInput.data_source_type && parentInput.data_source_type === 'wdb_table'",
                "optionalExpression": "parentInput.data_source_type && parentInput.data_source_type !== 'wdb_table'",
                "optional": true,
                "hint": "Select a data table to fetch the data.",
                "type": "string",
                "name": "table_id"
              },
              {
                "control_type": "select",
                "label": "File format",
                "extends_schema": true,
                "change_on_blur": true,
                "default": "csv",
                "ngIf": "parentInput.data_source_type && parentInput.data_source_type !== 'wdb_table'",
                "optional": true,
                "sticky": true,
                "pick_list": [
                  [
                    "CSV",
                    "csv"
                  ],
                  [
                    "Excel",
                    "excel"
                  ]
                ],
                "hint": "Choose the data format . Today CSV and Excel file formats are supported.",
                "type": "string",
                "name": "file_format"
              },
              {
                "control_type": "text",
                "label": "Worksheet",
                "ngIf": "parentInput.data_source_type && parentInput.data_source_type !== 'wdb_table' && parentInput.file_format === 'excel'",
                "optionalExpression": "parentInput.file_format && parentInput.file_format !== 'excel'",
                "optional": true,
                "mark_as_required": true,
                "extends_schema": false,
                "hint": "Provide the sheet name from the Excel file where the data is available.",
                "type": "string",
                "name": "excel_sheet_name"
              },
              {
                "control_type": "text",
                "label": "Range",
                "ngIf": "parentInput.data_source_type && parentInput.data_source_type !== 'wdb_table' && parentInput.file_format === 'excel'",
                "optionalExpression": "parentInput.file_format !== 'excel'",
                "optional": true,
                "mark_as_required": true,
                "extends_schema": false,
                "hint": "Provide the cell range of the data. e.g A5:F2000. Make sure to include the header row if the schema type selected is ‘Infer’.",
                "type": "string",
                "name": "excel_range"
              },
              {
                "control_type": "select",
                "label": "Column schema type",
                "extends_schema": true,
                "change_on_blur": true,
                "default": "defined",
                "ngIf": "parentInput.data_source_type && parentInput.data_source_type !== 'wdb_table'",
                "optional": true,
                "sticky": true,
                "pick_list": [
                  [
                    "Defined",
                    "defined"
                  ],
                  [
                    "Dynamic",
                    "dynamic"
                  ],
                  [
                    "Infer",
                    "infer"
                  ]
                ],
                "hint": "                   Choose ‘Define' to provide column names and types explicitly in the action.\n                   Choose ‘Dynamic’ to pass schema as array data pill from upstream action.\n                   Choose ‘Infer’ to infer column names and schema automatically from the data and its header.\n",
                "type": "string",
                "name": "schema_type"
              },
              {
                "control_type": "schema-designer",
                "label": "Data schema",
                "sample_data_type": "csv",
                "add_field_label": "Add column name",
                "exclude_fields": [
                  "hint",
                  "parentId"
                ],
                "exclude_fields_types": [
                  "array",
                  "object"
                ],
                "empty_schema_title": "Provide column names in your CSV.",
                "empty_schema_message": "<button type=\"button\" data-action=\"generateSchema\">Use a sample CSV file</button> to input all column names at once.",
                "ngIf": "parentInput.data_source_type && parentInput.data_source_type !== 'wdb_table' && parentInput.file_format === 'csv' && parentInput.schema_type === 'defined'",
                "optionalExpression": "parentInput.data_source_type === 'wdb_table' || parentInput.file_format === 'excel' || parentInput.schema_type !== 'defined'",
                "optional": true,
                "mark_as_required": true,
                "enforce_generated_schema_fields_optional": true,
                "hint": "Describe the column schema of the data in this data source.",
                "type": "string",
                "name": "table_schema"
              },
              {
                "control_type": "list",
                "label": "Data schema",
                "ngIf": "parentInput.data_source_type && parentInput.data_source_type !== 'wdb_table' && parentInput.file_format === 'csv' && parentInput.schema_type === 'dynamic'",
                "optionalExpression": "parentInput.data_source_type === 'wdb_table' || parentInput.file_format === 'excel' || parentInput.schema_type !== 'dynamic'",
                "optional": true,
                "mark_as_required": true,
                "extends_schema": true,
                "send_list_schema": true,
                "drag_list": true,
                "default": "=",
                "hint": "Provide the data pill with a schema.",
                "type": "string",
                "name": "dynamic_table_schema"
              },
              {
                "control_type": "schema-designer",
                "label": "Data schema",
                "sample_data_type": "excel",
                "add_field_label": "Add column name",
                "exclude_fields": [
                  "hint",
                  "parentId"
                ],
                "exclude_fields_types": [
                  "array",
                  "object"
                ],
                "empty_schema_title": "Provide column names in your data source.",
                "empty_schema_message": "Provide all column names within the selected range",
                "ngIf": "parentInput.data_source_type && parentInput.data_source_type !== 'wdb_table' && parentInput.file_format === 'excel' && parentInput.schema_type === 'defined'",
                "optionalExpression": "parentInput.data_source_type === 'wdb_table' || parentInput.file_format === 'csv' || parentInput.schema_type !== 'defined'",
                "optional": true,
                "mark_as_required": true,
                "enforce_generated_schema_fields_optional": true,
                "hint": "Describe the schema of the columns of the data source.",
                "type": "string",
                "name": "excel_table_schema"
              },
              {
                "control_type": "list",
                "label": "Data schema",
                "ngIf": "parentInput.data_source_type && parentInput.data_source_type !== 'wdb_table' && parentInput.file_format === 'excel' && parentInput.schema_type === 'dynamic'",
                "optionalExpression": "parentInput.data_source_type === 'wdb_table' || parentInput.file_format === 'csv' || parentInput.schema_type !== 'dynamic'",
                "optional": true,
                "mark_as_required": true,
                "extends_schema": true,
                "send_list_schema": true,
                "drag_list": true,
                "default": "=",
                "hint": "Provide the sheet name from the Excel file where the data is available.",
                "type": "string",
                "name": "excel_dynamic_table_schema"
              },
              {
                "control_type": "checkbox",
                "label": "Column relaxation",
                "render_input": "boolean_conversion",
                "parse_output": "boolean_conversion",
                "sticky": true,
                "optional": true,
                "ngIf": "parentInput.data_source_type && parentInput.data_source_type !== 'wdb_table' && parentInput.schema_type === 'defined'",
                "optionalExpression": "parentInput.data_source_type && parentInput.data_source_type === 'wdb_table' || parentInput.schema_type !== 'defined'",
                "default": "false",
                "hint": "                    Select <b>Yes</b> if the incoming source data may contain additional columns than the schema provided.\n                    Select <b>No</b> to exactly match schema with the data, and it returns error if additional columns are encountered.\n",
                "toggle_hint": "Select from option list",
                "toggle_field": {
                  "label": "Column relaxation",
                  "control_type": "text",
                  "toggle_hint": "Use custom value",
                  "sticky": true,
                  "optional": true,
                  "render_input": "boolean_conversion",
                  "parse_output": "boolean_conversion",
                  "ngIf": "parentInput.data_source_type && parentInput.data_source_type !== 'wdb_table' && parentInput.schema_type === 'defined'",
                  "optionalExpression": "parentInput.data_source_type && parentInput.data_source_type === 'wdb_table' || parentInput.schema_type !== 'defined'",
                  "default": false,
                  "hint": "                    Select <b>Yes</b> if the incoming source data may contain additional columns than the schema provided.\n                    Select <b>No</b> to exactly match schema with the data, and it returns error if additional columns are encountered.\n",
                  "type": "boolean",
                  "name": "allow_relaxed_schema"
                },
                "type": "boolean",
                "name": "allow_relaxed_schema"
              },
              {
                "control_type": "checkbox",
                "label": "Contains header",
                "render_input": "boolean_conversion",
                "parse_output": "boolean_conversion",
                "sticky": true,
                "optional": true,
                "ngIf": "parentInput.data_source_type && parentInput.data_source_type !== 'wdb_table' && parentInput.file_format === 'csv' && parentInput.schema_type !== 'infer'",
                "default": "false",
                "hint": "                    Select <b>Yes</b> if the incoming data contains header as the first row. If so, SQL transformations will understand the columns in the file by name matching the first row in the file with the schema provided.\n                    If <b>No</b> is chosen, the column schema provided will be matched to the order of the columns in the file from left to right.\n",
                "toggle_hint": "Select from option list",
                "toggle_field": {
                  "label": "Contains header",
                  "control_type": "text",
                  "toggle_hint": "Use custom value",
                  "sticky": true,
                  "optional": true,
                  "ngIf": "parentInput.data_source_type && parentInput.data_source_type !== 'wdb_table' && parentInput.file_format === 'csv' && parentInput.schema_type !== 'infer'",
                  "default": false,
                  "render_input": "boolean_conversion",
                  "parse_output": "boolean_conversion",
                  "hint": "                    Select <b>Yes</b> if the incoming data contains header as the first row. If so, SQL transformations will understand the columns in the file by name matching the first row in the file with the schema provided.\n                    If <b>No</b> is chosen, the column schema provided will be matched to the order of the columns in the file from left to right.\n",
                  "type": "boolean",
                  "name": "csv_ignore_header"
                },
                "type": "boolean",
                "name": "csv_ignore_header"
              },
              {
                "control_type": "checkbox",
                "label": "Contains header",
                "render_input": "boolean_conversion",
                "parse_output": "boolean_conversion",
                "sticky": true,
                "optional": true,
                "ngIf": "parentInput.data_source_type && parentInput.data_source_type !== 'wdb_table' && parentInput.file_format === 'excel' && parentInput.schema_type !== 'infer'",
                "hint": "Set to <b>Yes</b> if the Excel range contain a header row that needs to be ignored. Default is set to No.",
                "default": "false",
                "toggle_hint": "Select from option list",
                "toggle_field": {
                  "label": "Contains header",
                  "control_type": "text",
                  "toggle_hint": "Use custom value",
                  "sticky": true,
                  "optional": true,
                  "render_input": "boolean_conversion",
                  "parse_output": "boolean_conversion",
                  "ngIf": "parentInput.data_source_type && parentInput.data_source_type !== 'wdb_table' && parentInput.file_format === 'excel' && parentInput.schema_type !== 'infer'",
                  "hint": "Set to <b>Yes</b> if the Excel range contain a header row that needs to be ignored. Default is set to No.",
                  "default": false,
                  "type": "boolean",
                  "name": "excel_ignore_header"
                },
                "type": "boolean",
                "name": "excel_ignore_header"
              },
              {
                "control_type": "select",
                "label": "Header matching",
                "ngIf": "parentInput.data_source_type && parentInput.data_source_type !== 'wdb_table' && parentInput.schema_type !== 'infer' &&((parentInput.file_format == 'csv' && parentInput.csv_ignore_header === 'true') || (parentInput.file_format == 'excel' && parentInput.excel_ignore_header === 'true'))",
                "optional": true,
                "sticky": true,
                "pick_list": [
                  [
                    "Ordered",
                    "ordered"
                  ],
                  [
                    "Named",
                    "named"
                  ]
                ],
                "hint": "Choose how to match header with schema columns",
                "default": "ordered",
                "type": "string",
                "name": "matching_mode"
              },
              {
                "control_type": "select",
                "label": "Column delimiter",
                "pick_list": "csv_delimiters",
                "sticky": true,
                "optional": true,
                "ngIf": "parentInput.data_source_type && parentInput.data_source_type !== 'wdb_table' && parentInput.file_format === 'csv'",
                "hint": "Select the character that separates columns in the CSV contents. Default is set to comma.",
                "default": "comma",
                "type": "string",
                "name": "csv_delimiter"
              }
            ],
            "sticky": true,
            "type": "array"
          },
          {
            "initially_expanded": true,
            "label": "Query",
            "name": "query",
            "optional": false,
            "override": true,
            "properties": [
              {
                "properties": [
                  {
                    "control_type": "text",
                    "label": "Schema",
                    "extends_schema": true,
                    "broadcast_change_event": true,
                    "type": "string",
                    "name": "schema"
                  },
                  {
                    "properties": [

                    ],
                    "label": "Data",
                    "optional": true,
                    "sticky": true,
                    "type": "object",
                    "name": "data"
                  }
                ],
                "label": "Query parameters",
                "control_type": "form-schema-builder",
                "item_label": "parameter",
                "exclude_fields": [
                  "hint"
                ],
                "optional": true,
                "override": true,
                "sticky": true,
                "schema_field_name_regex": [
                  "^[a-zA-Z][\\w]*$",
                  "Query parameter names only allow alphanumerical symbols and underscore (_)"
                ],
                "force_name_label_equality": true,
                "hint": "Add the parameters to be used in the WHERE condition of the query below. e.g. id.\nNext, add the actual parameter value, which can be static or datapills.\nSelect the closest corresponding data type that your database is expecting for the bind variable\n",
                "type": "object",
                "name": "parameters"
              },
              {
                "control_type": "code",
                "label": "SQL query",
                "language": "sql",
                "sql_mime_type": "x-sql",
                "support_pills": true,
                "allow_formula_mode": true,
                "sticky": true,
                "optional": false,
                "hint": "                       Add SQL select statement to query one or more data sources.\n                       Joins and more complex functions are also supported, more details available <a href=\"https://docs.workato.com/features/sql-transformations-query-setting.html\" target=\"_blank\">here</a>.\n                       To add parameters in the WHERE condition, use bind variables notation, e.g. id = @id, where id denotes the field name from the parameters section above.\n",
                "type": "string",
                "name": "sql_select_query"
              }
            ],
            "type": "object"
          }
        ],
        "uuid": "c7bd17d4-e699-4859-8d5a-be5d01e1e18f"
      },
      {
        "number": 3,
        "provider": "workato_files",
        "name": "store_file",
        "as": "d6945daf",
        "keyword": "action",
        "dynamicPickListSelection": {
          "file_path": {
            "ids": [
              "/",
              "/CompareSnowflakeICM"
            ],
            "titles": [
              "Root directory",
              "CompareSnowflakeICM"
            ]
          }
        },
        "toggleCfg": {
          "is_csv_file": true,
          "file_path": true,
          "csv_has_header": true
        },
        "input": {
          "is_csv_file": "true",
          "schema_type": "auto",
          "csv_has_header": "true",
          "csv_delimiter": "comma",
          "csv_quote": "double",
          "encoding": "UTF-8",
          "file_name": "Snowflake_ICM_Difference.csv",
          "file_path": "/CompareSnowflakeICM",
          "content": "#{_dp('{\"pill_type\":\"output\",\"provider\":\"workato_transformations\",\"line\":\"a881eaa0\",\"path\":[\"content\"]}')}"
        },
        "uuid": "4279c0cb-a150-4bfc-9f01-e37826c2c8cf"
      },
      {
        "number": 4,
        "provider": "google_drive",
        "name": "search_file_or_folder",
        "as": "ced87193",
        "keyword": "action",
        "dynamicPickListSelection": {
          "folderId": {
            "ids": [
              "0AGyq8pBBaRmrUk9PVA",
              "1aRf0Es6Sqa773t7pBUsWw6juiefvDhdH"
            ],
            "titles": [
              "My Drive",
              "ICM_DIFF"
            ]
          }
        },
        "toggleCfg": {
          "folderId": true
        },
        "input": {
          "kind": "Files",
          "folderId": "1aRf0Es6Sqa773t7pBUsWw6juiefvDhdH",
          "name": "Snowflake_ICM_Difference",
          "trashed": "false"
        },
        "visible_config_fields": [
          "kind",
          "folderId",
          "name",
          "query",
          "pageToken",
          "pageSize",
          "trashed"
        ],
        "uuid": "12f19f0e-360e-4cce-8dfc-5a0f67366c2f",
        "skip": false
      },
      {
        "number": 5,
        "provider": "google_drive",
        "name": "delete_file",
        "as": "d3fadc3b",
        "keyword": "action",
        "dynamicPickListSelection": {
          "fileId": {
            "ids": [
              "0AERg_XSQXtHMUk9PVA/0AERg_XSQXtHMUk9PVA",
              "1J8LGp5d9A0_lUmT3RsQhk1SDL39r4qRi/0AERg_XSQXtHMUk9PVA",
              "14gMznDD05goZt0H4wp8ztRQ5wIg9lZnaXmwpEpugVpA/0AERg_XSQXtHMUk9PVA"
            ],
            "titles": [
              "workato",
              "ICM_CMP",
              "ICM_CMP_DIFF_copy"
            ]
          }
        },
        "toggleCfg": {
          "fileId": true
        },
        "input": {
          "fileId": "#{_dp('{\"pill_type\":\"output\",\"provider\":\"google_drive\",\"line\":\"ced87193\",\"path\":[\"files\",{\"path_element_type\":\"current_item\"},\"id\"]}')}"
        },
        "uuid": "52ea9b04-f391-473e-a280-4da9b573c826",
        "skip": false
      },
      {
        "number": 6,
        "provider": "workato_files",
        "name": "get_file_contents",
        "as": "faa6724b",
        "keyword": "action",
        "dynamicPickListSelection": {
          "file_path": {
            "ids": [
              "/",
              "/CompareSnowflakeICM",
              "/CompareSnowflakeICM/Snowflake_ICM_Difference.csv"
            ],
            "titles": [
              "Root directory",
              "CompareSnowflakeICM",
              "Snowflake_ICM_Difference.csv"
            ]
          }
        },
        "toggleCfg": {
          "file_path": false
        },
        "input": {
          "file_path": "/CompareSnowflakeICM/Snowflake_ICM_Difference.csv"
        },
        "uuid": "fa472753-eb9e-48d6-915e-8b0f97e51213",
        "skip": false
      },
      {
        "number": 7,
        "provider": "google_drive",
        "name": "__adhoc_http_action",
        "as": "f9681151",
        "keyword": "action",
        "input": {
          "mnemonic": "CSV TO Gsheet",
          "request_type": "raw",
          "response_type": "json",
          "verb": "post",
          "path": "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart",
          "request_headers": [
            {
              "name": "Content-Type",
              "value": "multipart/related; boundary=foo_bar_baz"
            }
          ],
          "input": {
            "data": "--foo_bar_baz\nContent-Type: application/json; charset=UTF-8\n\n{\n  \"name\": \"Snowflake_ICM_Difference\",\n  \"mimeType\": \"application/vnd.google-apps.spreadsheet\",\n  \"parents\": [\"#{_dp('{\"pill_type\":\"output\",\"provider\":\"google_drive\",\"line\":\"ced87193\",\"path\":[\"files\",{\"path_element_type\":\"current_item\"},\"parents\",{\"path_element_type\":\"current_item\"},\"id\"]}')}\"]\n}\n\n--foo_bar_baz\nContent-Type: text/csv\n\n#{_dp('{\"pill_type\":\"output\",\"provider\":\"workato_files\",\"line\":\"faa6724b\",\"path\":[\"content\"]}')}\n\n--foo_bar_baz--"
          },
          "output": "[{\"control_type\":\"text\",\"label\":\"Kind\",\"type\":\"string\",\"name\":\"kind\"},{\"control_type\":\"text\",\"label\":\"ID\",\"type\":\"string\",\"name\":\"id\"},{\"control_type\":\"text\",\"label\":\"Name\",\"type\":\"string\",\"name\":\"name\"},{\"control_type\":\"text\",\"label\":\"Mime type\",\"type\":\"string\",\"name\":\"mimeType\"}]",
          "response_headers": "[{\"control_type\":\"text\",\"label\":\"Content type\",\"type\":\"string\",\"name\":\"content_type\"},{\"control_type\":\"text\",\"label\":\"X guploader uploadid\",\"type\":\"string\",\"name\":\"x_guploader_uploadid\"},{\"control_type\":\"text\",\"label\":\"Access control allow credentials\",\"type\":\"string\",\"name\":\"access_control_allow_credentials\"},{\"control_type\":\"text\",\"label\":\"Cache control\",\"type\":\"string\",\"name\":\"cache_control\"},{\"control_type\":\"text\",\"label\":\"Date\",\"render_input\":\"date_time_conversion\",\"parse_output\":\"date_time_conversion\",\"type\":\"date_time\",\"name\":\"date\"},{\"control_type\":\"text\",\"label\":\"Expires\",\"render_input\":\"date_time_conversion\",\"parse_output\":\"date_time_conversion\",\"type\":\"date_time\",\"name\":\"expires\"},{\"control_type\":\"text\",\"label\":\"Pragma\",\"type\":\"string\",\"name\":\"pragma\"},{\"control_type\":\"text\",\"label\":\"Server\",\"type\":\"string\",\"name\":\"server\"},{\"control_type\":\"text\",\"label\":\"Vary\",\"type\":\"string\",\"name\":\"vary\"},{\"control_type\":\"text\",\"label\":\"X content type options\",\"type\":\"string\",\"name\":\"x_content_type_options\"},{\"control_type\":\"text\",\"label\":\"X frame options\",\"type\":\"string\",\"name\":\"x_frame_options\"},{\"control_type\":\"text\",\"label\":\"X xss protection\",\"type\":\"string\",\"name\":\"x_xss_protection\"},{\"control_type\":\"text\",\"label\":\"Content length\",\"type\":\"string\",\"name\":\"content_length\"},{\"control_type\":\"text\",\"label\":\"Alt svc\",\"type\":\"string\",\"name\":\"alt_svc\"}]"
        },
        "extended_output_schema": [
          {
            "label": "Body",
            "name": "body",
            "optional": true,
            "properties": [
              {
                "control_type": "text",
                "label": "Kind",
                "optional": true,
                "type": "string",
                "name": "kind"
              },
              {
                "control_type": "text",
                "label": "ID",
                "optional": true,
                "type": "string",
                "name": "id"
              },
              {
                "control_type": "text",
                "label": "Name",
                "optional": true,
                "type": "string",
                "name": "name"
              },
              {
                "control_type": "text",
                "label": "Mime type",
                "optional": true,
                "type": "string",
                "name": "mimeType"
              }
            ],
            "type": "object"
          },
          {
            "label": "Headers",
            "name": "headers",
            "optional": true,
            "properties": [
              {
                "control_type": "text",
                "label": "Content type",
                "optional": true,
                "type": "string",
                "name": "content_type"
              },
              {
                "control_type": "text",
                "label": "X guploader uploadid",
                "optional": true,
                "type": "string",
                "name": "x_guploader_uploadid"
              },
              {
                "control_type": "text",
                "label": "Access control allow credentials",
                "optional": true,
                "type": "string",
                "name": "access_control_allow_credentials"
              },
              {
                "control_type": "text",
                "label": "Cache control",
                "optional": true,
                "type": "string",
                "name": "cache_control"
              },
              {
                "control_type": "text",
                "label": "Date",
                "render_input": "date_time_conversion",
                "parse_output": "date_time_conversion",
                "optional": true,
                "type": "date_time",
                "name": "date"
              },
              {
                "control_type": "text",
                "label": "Expires",
                "render_input": "date_time_conversion",
                "parse_output": "date_time_conversion",
                "optional": true,
                "type": "date_time",
                "name": "expires"
              },
              {
                "control_type": "text",
                "label": "Pragma",
                "optional": true,
                "type": "string",
                "name": "pragma"
              },
              {
                "control_type": "text",
                "label": "Server",
                "optional": true,
                "type": "string",
                "name": "server"
              },
              {
                "control_type": "text",
                "label": "Vary",
                "optional": true,
                "type": "string",
                "name": "vary"
              },
              {
                "control_type": "text",
                "label": "X content type options",
                "optional": true,
                "type": "string",
                "name": "x_content_type_options"
              },
              {
                "control_type": "text",
                "label": "X frame options",
                "optional": true,
                "type": "string",
                "name": "x_frame_options"
              },
              {
                "control_type": "text",
                "label": "X xss protection",
                "optional": true,
                "type": "string",
                "name": "x_xss_protection"
              },
              {
                "control_type": "text",
                "label": "Content length",
                "optional": true,
                "type": "string",
                "name": "content_length"
              },
              {
                "control_type": "text",
                "label": "Alt svc",
                "optional": true,
                "type": "string",
                "name": "alt_svc"
              }
            ],
            "type": "object"
          }
        ],
        "extended_input_schema": [
          {
            "control_type": "text",
            "hint": "Base URI is <b>https://www.googleapis.com/drive/v3/</b> - path will be appended to this URI. Use absolute URI to override this base URI.",
            "label": "Path",
            "name": "path",
            "optional": false,
            "type": "string"
          },
          {
            "control_type": "select",
            "default": "json",
            "extends_schema": true,
            "label": "Request type",
            "name": "request_type",
            "optional": true,
            "pick_list": [
              [
                "JSON request body",
                "json"
              ],
              [
                "URL encoded form",
                "urlencoded"
              ],
              [
                "Multipart form",
                "multipart"
              ],
              [
                "Raw JSON request body",
                "raw"
              ],
              [
                "XML request body",
                "xml"
              ],
              [
                "Plain text",
                "text"
              ],
              [
                "Raw request body",
                "rawdata"
              ]
            ],
            "sticky": false,
            "type": "string"
          },
          {
            "control_type": "select",
            "default": "json",
            "extends_schema": true,
            "label": "Response type",
            "name": "response_type",
            "optional": true,
            "pick_list": [
              [
                "JSON response",
                "json"
              ],
              [
                "Raw JSON Response",
                "raw"
              ],
              [
                "XML Response",
                "xml2"
              ],
              [
                "Raw response",
                "text"
              ]
            ],
            "sticky": false,
            "type": "string"
          },
          {
            "label": "Input",
            "name": "input",
            "optional": true,
            "properties": [
              {
                "control_type": "text-area",
                "label": "Data",
                "sticky": true,
                "optional": true,
                "type": "string",
                "name": "data"
              }
            ],
            "type": "object"
          },
          {
            "control_type": "key_value",
            "empty_list_text": "Refer to the API documentation and add required headers to this HTTP request",
            "empty_list_title": "Does this HTTP request require headers?",
            "item_label": "Header",
            "label": "Request headers",
            "name": "request_headers",
            "of": "object",
            "optional": true,
            "properties": [
              {
                "control_type": "text",
                "label": "Name",
                "optional": true,
                "type": "string",
                "name": "name"
              },
              {
                "control_type": "text",
                "label": "Value",
                "optional": true,
                "type": "string",
                "name": "value"
              }
            ],
            "type": "array"
          },
          {
            "control_type": "schema-designer",
            "extends_schema": true,
            "label": "Response body",
            "name": "output",
            "optional": true,
            "sample_data_type": "json_http",
            "sticky": true,
            "type": "string",
            "schema_neutral": true
          },
          {
            "control_type": "schema-designer",
            "extends_schema": true,
            "label": "Response headers",
            "name": "response_headers",
            "optional": true,
            "sample_data_type": "json_http",
            "sticky": false,
            "type": "string",
            "schema_neutral": true
          },
          {
            "control_type": "checkbox",
            "label": "Inspect",
            "name": "inspect",
            "ngIf": "false",
            "optional": true,
            "parse_output": "float_conversion",
            "type": "number"
          }
        ],
        "uuid": "afc43490-05f0-4232-8846-81c47519d3cb",
        "wizardFinished": true,
        "skip": false
      }
    ],
    "uuid": "e11d2a71-7453-481d-aaef-0c1918bf10bd",
    "unfinished": false
  },
  "config": [
    {
      "keyword": "application",
      "provider": "workato_transformations",
      "skip_validation": false,
      "account_id": null
    },
    {
      "keyword": "application",
      "provider": "workato_files",
      "skip_validation": false,
      "account_id": null
    },
    {
      "keyword": "application",
      "provider": "google_drive",
      "skip_validation": false,
      "account_id": {
        "zip_name": "Saurabh_POC/suhas_google_drive.connection.json",
        "name": "Suhas Google Drive",
        "folder": "Saurabh_POC"
      }
    },
    {
      "keyword": "application",
      "provider": "workato_recipe_function",
      "skip_validation": false,
      "account_id": null
    }
  ]
}