{
  "name": "FP&A Close Calendar Scheduled Tasks Automation",
  "description": "",
  "version": 1,
  "private": true,
  "concurrency": 1,
  "code": {
    "number": 0,
    "provider": "clock",
    "name": "scheduled_event",
    "as": "73f63148",
    "keyword": "trigger",
    "dynamicPickListSelection": {
      "timezone": "America/New_York (-05:00)",
      "time_unit": "Custom schedule"
    },
    "input": {
      "time_unit": "custom_schedule",
      "timezone": "America/New_York",
      "cron_expression": "00 00 25 * *"
    },
    "extended_input_schema": [
      {
        "control_type": "cron",
        "enforce_template_mode": true,
        "hint": "                        Cron expressions are written as: <b>[minute]  [hour]  [day of month]  [month]  [day of week]</b>.\n                        <a href=\"https://crontab.guru/\" target=\"_blank\">Learn more</a>\n",
        "label": "Cron expression",
        "name": "cron_expression",
        "optional": false,
        "type": "string"
      },
      {
        "control_type": "select",
        "hint": "Select the timezone to use. Leave it blank to use <b>{{authUser.timezone}}</b>",
        "label": "Timezone",
        "name": "timezone",
        "optional": true,
        "pick_list": "timezone_id_global_pick_list",
        "pick_list_connection_less": true,
        "type": "string"
      },
      {
        "control_type": "date_time",
        "enforce_template_mode": true,
        "extends_schema": true,
        "hint": "Set date and time to start or leave blank to start immediately. <b>Once recipe has been run or tested, value cannot be changed.</b>",
        "label": "Start after",
        "name": "start_after",
        "optional": true,
        "parse_output": "date_time_conversion",
        "since_field": true,
        "type": "date_time",
        "ignore_timezone": true,
        "render_input": "date_time_conversion"
      }
    ],
    "visible_config_fields": [
      "time_unit",
      "trigger_every",
      "timezone"
    ],
    "block": [
      {
        "number": 1,
        "provider": "google_drive",
        "name": "export_file",
        "as": "24000fb4",
        "keyword": "action",
        "dynamicPickListSelection": {
          "fileId": {
            "ids": [
              "0AESHaYwHW5eXUk9PVA/0AESHaYwHW5eXUk9PVA",
              "1Rd1hA_xQ0hubWGMgtVwEMoTfMnlRSdxw/0AESHaYwHW5eXUk9PVA",
              "1QzkdYk56Ue5_qYeQbb-cVbasO4gXLWZQCE5bHvrIsvA/0AESHaYwHW5eXUk9PVA"
            ],
            "titles": [
              "Enterprise Performance Management",
              "Workato",
              "CY24_Close_Calendar_Automation_Sheet"
            ]
          }
        },
        "toggleCfg": {
          "fileId": true,
          "mimeType": true
        },
        "input": {
          "mimeType": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "fileId": "1FCbc3viszTS9QPHioNxMNZaImEdo05pU2bXFg4rGUcM"
        },
        "uuid": "b4449606-7203-4c98-aa17-82bdb58c8b9b"
      },
      {
        "number": 2,
        "provider": "py_eval",
        "name": "invoke_custom_py_code",
        "as": "3fd12c82",
        "keyword": "action",
        "input": {
          "code": "import pandas as pd\nimport base64\nimport io\n\ndef main(input):\n  file_content = input['file_content']\n  target_sheet_name = input['sheet_name']\n  delimiter = input['delimiter']\n  file_name = input['file_name']\n  new_file_name = file_name.replace(\"xlsx\", \"csv\")\n  \n  #base64 encode This module provides functions for encoding binary data to printable ASCII characters and decoding such encodings back to binary data.\n  message_bytes = base64.b64decode(file_content)\n  \n  #Excel File to memory - io â€” Core tools for working with streams\n  toread = io.BytesIO(message_bytes)\n  \n  #Read the SheetNames\n  sheet_names= pd.ExcelFile(toread).sheet_names\n  \n  #File Contain 3 sheets ['Connector Requirements', 'Status Tracking', 'Dispatch Review']\n  for sheet in sheet_names:\n    #if the sheet name is equal to Status Tracking convert it to csv\n    if sheet == target_sheet_name:\n      \n       #read_excel File\n      read_file = pd.read_excel(toread, sheet_name=sheet)\n      \n      #convert csv\n      csv = read_file.to_csv(path_or_buf=None,index=False, header=True, sep=delimiter, encoding='utf-8')\n          \n  \n  \n\n  return {'csv': csv,\n         'sheet_names':sheet_names, \n         'new_file_name': new_file_name}\n",
          "name": "Convert Excel to CSV",
          "code_input": {
            "schema": "[{\"name\":\"file_content\",\"type\":\"string\",\"optional\":true,\"label\":\"file_content\",\"details\":{\"real_name\":\"file_content\"},\"control_type\":\"text\"},{\"name\":\"sheet_name\",\"type\":\"string\",\"optional\":true,\"label\":\"sheet_name\",\"hint\":\"Specify the name of the sheet in your Excel file that you want to parse to CSV. Only 1 sheet name allowed.\",\"details\":{\"real_name\":\"sheet_name\"},\"control_type\":\"text\"},{\"name\":\"delimiter\",\"type\":\"string\",\"optional\":true,\"label\":\"delimiter\",\"hint\":\"Choose a delimiting character to separate the values in each row of the output CSV. e.g comma, pipe etc.\",\"details\":{\"real_name\":\"delimiter\"},\"control_type\":\"text\"},{\"name\":\"file_name\",\"type\":\"string\",\"optional\":true,\"label\":\"file_name\",\"details\":{\"real_name\":\"file_name\"},\"control_type\":\"text\"}]",
            "data": {
              "file_content": "=_dp('{\"pill_type\":\"output\",\"provider\":\"google_drive\",\"line\":\"24000fb4\",\"path\":[\"file_content\"]}').to_s.encode_base64",
              "sheet_name": "Workato1",
              "delimiter": ",",
              "file_name": "Close_Calendar_Task_Scheduler_Automation.xlsx"
            }
          },
          "code_output_schema_json": "[{\"name\":\"csv\",\"type\":\"string\",\"optional\":false,\"label\":\"Csv\",\"control_type\":\"text\"},{\"name\":\"new_file_name\",\"type\":\"string\",\"optional\":false,\"label\":\"New_file_name\",\"hint\":\"The file coming in is Excel .xlsx format.  We want to convert the file name to .csv as well.\",\"control_type\":\"text\"}]"
        },
        "extended_output_schema": [
          {
            "label": "Output",
            "name": "output",
            "properties": [
              {
                "control_type": "text",
                "label": "Csv",
                "name": "csv",
                "type": "string",
                "optional": false
              },
              {
                "control_type": "text",
                "label": "New_file_name",
                "name": "new_file_name",
                "type": "string",
                "optional": false,
                "hint": "The file coming in is Excel .xlsx format.  We want to convert the file name to .csv as well."
              }
            ],
            "type": "object"
          }
        ],
        "extended_input_schema": [
          {
            "control_type": "form-schema-builder",
            "hint": "Define the input fields that will be passed to your Python code",
            "label": "Input fields",
            "name": "code_input",
            "optional": true,
            "override": true,
            "properties": [
              {
                "control_type": "text",
                "label": "Schema",
                "extends_schema": true,
                "type": "string",
                "name": "schema"
              },
              {
                "properties": [
                  {
                    "control_type": "text",
                    "label": "file_content",
                    "name": "file_content",
                    "type": "string",
                    "optional": true,
                    "details": {
                      "real_name": "file_content"
                    }
                  },
                  {
                    "control_type": "text",
                    "label": "sheet_name",
                    "name": "sheet_name",
                    "type": "string",
                    "optional": true,
                    "hint": "Specify the name of the sheet in your Excel file that you want to parse to CSV. Only 1 sheet name allowed.",
                    "details": {
                      "real_name": "sheet_name"
                    }
                  },
                  {
                    "control_type": "text",
                    "label": "delimiter",
                    "name": "delimiter",
                    "type": "string",
                    "optional": true,
                    "hint": "Choose a delimiting character to separate the values in each row of the output CSV. e.g comma, pipe etc.",
                    "details": {
                      "real_name": "delimiter"
                    }
                  },
                  {
                    "control_type": "text",
                    "label": "file_name",
                    "name": "file_name",
                    "type": "string",
                    "optional": true,
                    "details": {
                      "real_name": "file_name"
                    }
                  }
                ],
                "label": "Data",
                "type": "object",
                "name": "data"
              }
            ],
            "sticky": true,
            "type": "object"
          }
        ],
        "visible_config_fields": [
          "name",
          "code_input",
          "code_output_schema_json",
          "code",
          "code_input.data.file_content",
          "code_input.schema",
          "code_input.data.sheet_name",
          "code_input.data",
          "code_input.data.delimiter",
          "code_input.data.file_name"
        ],
        "uuid": "fcd27c01-89db-44ae-a096-24b5269e84a8"
      },
      {
        "number": 3,
        "provider": "sftp",
        "name": "upload",
        "as": "c0dbc175",
        "keyword": "action",
        "toggleCfg": {
          "append": true
        },
        "input": {
          "filename": "/epm-sftp/Workato/#{_dp('{\"pill_type\":\"output\",\"provider\":\"py_eval\",\"line\":\"3fd12c82\",\"path\":[\"output\",\"new_file_name\"]}')}",
          "content": "#{_dp('{\"pill_type\":\"output\",\"provider\":\"py_eval\",\"line\":\"3fd12c82\",\"path\":[\"output\",\"csv\"]}')}",
          "append": "false"
        },
        "uuid": "ec6b92d3-b78d-4dfd-bded-87b6abbf6c2b"
      }
    ],
    "uuid": "6bb6049d-898e-4d60-8cf7-a533bc52c27f",
    "unfinished": false
  },
  "config": [
    {
      "keyword": "application",
      "provider": "clock",
      "skip_validation": false,
      "account_id": null
    },
    {
      "keyword": "application",
      "provider": "google_drive",
      "skip_validation": false,
      "account_id": {
        "zip_name": "Connections/epm_automate_google_service_account.connection.json",
        "name": "EPM-Automate Google Service Account",
        "folder": "Connections"
      }
    },
    {
      "keyword": "application",
      "provider": "sftp",
      "skip_validation": false,
      "account_id": {
        "zip_name": "Connections/onestream_prod_sftp.connection.json",
        "name": "OneStream PROD SFTP",
        "folder": "Connections"
      }
    },
    {
      "keyword": "application",
      "provider": "py_eval",
      "skip_validation": false,
      "account_id": null
    }
  ]
}